import gmpy2

'''
(p-q+1)/[(p+1)*q]==(-2*Y-X)/(s+Y)
s>X+Y
p+1<q
p-q=-(X+2*Y)/k-1=-t
p*(p+t)=n
p^2+p*t-n==0
'''

X=153801856029563198525204130558738800846256680799373350925981555360388985602786501362501554433635610131437376183630577217917787342621398264625389914280509
Y=8086061902465799210233863613232941060876437002894022994953293934963170056653232109405937694010696299303888742108631749969054117542816358078039478109426
n = 161010103536746712075112156042553283066813155993777943981946663919051986586388748662616958741697621238654724628406094469789970509959159343108847331259823125490271091357244742345403096394500947202321339572876147277506789731024810289354756781901338337411136794489136638411531539112369520980466458615878975406339
c = 64166146958225113130966383399465462600516627646827654061505253681784027524205938322376396685421354659091159523153346321216052274404398431369574383580893610370389016662302880230566394277969479472339696624461863666891731292801506958051383432113998695237733732222591191217365300789670291769876292466495287189494

t=X+2*Y+1
delta,f=gmpy2.iroot(t**2+4*n,2)
assert f

p=(delta-t)//2
q=(delta+t)//2
assert n==p*q

e=0x20002//2
phi=(p-1)*(q-1)
d=gmpy2.invert(e,phi)

flag2 = pow(c,d,n)
flag,f=gmpy2.iroot(flag2,2)
assert f
print(bytearray.fromhex(hex(flag)[2:]).decode())
